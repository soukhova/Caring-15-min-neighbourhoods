.fn = ~paste0("total_", str_replace(.x, "-","_")))
summary(access_15_dep_total_wide)
summary(access_15_dep_norm_wide)
summary(access_15_dep_prop_wide)
summary(access_15_dep_div)
access_15_dep_wide <- access_15_dep_total_wide |>
left_join(access_15_dep_norm_wide,
by = "from_id") |>
left_join(access_15_dep_prop_wide,
by = "from_id") |>
left_join(access_15_dep_div,
by = "from_id")
set.seed(5935)
# run the SOM algorithm
nrows <- 5
ncols <- 5
access.som <- trainSOM(x.data = access_15_dep_wide |>
# Remove the non-normalized accessibility scores
select(-c(from_id, starts_with("total_"))),
dimension=c(nrows, ncols),
nb.save = 100,
radius.type = "letremy",
verbose = TRUE)
View(access_15_dep_wide)
access.som <- trainSOM(x.data = access_15_dep_wide |>
# Remove the non-normalized accessibility scores
select(-c(total_Care_Category, from_id, starts_with("total_"))),
dimension=c(nrows, ncols),
nb.save = 100,
radius.type = "letremy",
verbose = TRUE)
access.som <- trainSOM(x.data = access_15_dep_wide |>
# Remove the non-normalized accessibility scores, as well as the Care Category character names
select(-c(from_id, total_Care_Category, starts_with("total_"),
norm_Care_Category, prop_Care_Category)),
dimension=c(nrows, ncols),
nb.save = 100,
radius.type = "letremy",
verbose = TRUE)
access_15_dep_wide |>
# Remove the non-normalized accessibility scores, as well as the Care Category character names
select(-c(from_id, total_Care_Category, starts_with("total_"),
norm_Care_Category, prop_Care_Category)) |> summary()
library(AppliedPredictiveModeling) # Functions and Data Sets for 'Applied Predictive Modeling'
library(caret) # Classification and Regression Training
library(cowplot) # Streamlined Plot Theme and Plot Annotations for 'ggplot2'
library(ggparty) # 'ggplot' Visualizations for the 'partykit' Package
library(party) # A Laboratory for Recursive Partytioning
library(plotly) # Create Interactive Web Graphics via 'plotly.js'
library(rpart) # Recursive Partitioning and Regression Trees
library(rpart.plot) # Plot 'rpart' Models: An Enhanced Version of 'plot.rpart'
library(skimr) # Compact and Flexible Summaries of Data
library(sf) # Simple Features for R
library(SOMbrero) # SOM Bound to Realize Euclidean and Relational Outputs
library(tidyverse) # Easily Install and Load the 'Tidyverse'
library(tmap)
library(here)
library(parsnip)
load("access_15.rda")
load("HAM_census_21.rda")
Community_Boundaries <- st_read("data-raw/boundaries/Community_Boundaries.shp") |> mutate(COMMUNITY_ = ifelse(COMMUNITY_ == "Hamilton", "Hamilton-Central", COMMUNITY_))|> st_transform(crs=4326)
City_Boundary <- st_read("data-raw/boundaries/City_Boundary.shp") |> st_transform(crs=4326)
hydro_p_LakeOntario <- st_read("data-raw/boundaries/hydro_p_LakeOntario.shp") |> st_transform(crs=4326)
ham_bay <- st_read("data-raw/boundaries/Waterbodies.shp") |> st_transform(crs=4326) |> filter(FEATURE_TY == "Lake")
ham_bay_cropped<-st_crop(ham_bay$geometry, Community_Boundaries$geometry)
hydro_p_LakeOntario_cropped<-st_crop(hydro_p_LakeOntario$geometry, Community_Boundaries$geometry)
access_15_dep <- access_15 |>  filter(Care_Category == "Dependent-centric") |>
left_join(HAM_census_21 |> select(c(GeoUID, Population)) |> # and dssociate with census data and drop parcels in DAs with 0 population:
st_drop_geometry(),
by = "GeoUID")
access_15_dep <- access_15_dep |> filter(Population >= 0 | !is.na(Population))
access_15_dep_total <- access_15_dep |>
group_by(from_id) |>
summarize(tot_copp_isc = sum(copp_isc),
.groups = "drop")
#Join total opportunities to table:
access_15_dep <- access_15_dep |>
left_join(access_15_dep_total,
by = "from_id")
access_15_dep <- access_15_dep |>
mutate(prop_copp_isc = ifelse(tot_copp_isc > 0, copp_isc/tot_copp_isc, 0))
access_15_dep <- access_15_dep |>
mutate(copp_isc_norm = ifelse(tot_copp_isc != 0, (copp_isc - min(tot_copp_isc))/(max(tot_copp_isc) - min(tot_copp_isc)), 0))
View(access_15_dep)
access_15_dep$tot_copp_isc |> min()
access_15_dep$tot_copp_isc |> max()
0/(44)
0/0
44/0
(17-0)/44
access_15_dep <- access_15_dep |>
mutate(copp_isc_norm = (copp_isc - min(tot_copp_isc))/(max(tot_copp_isc) - min(tot_copp_isc)))
View(access_15_dep)
access_15_dep$tot_copp_isc |> min()
access_15_dep$tot_copp_isc |> max()
test <- access_15_dep |>
mutate(new = (copp_isc - min(tot_copp_isc))/(max(tot_copp_isc) - min(tot_copp_isc)))
View(test)
test$tot_copp_isc |> summary()
test <- access_15_dep |>
mutate(new = (copp_isc - min(tot_copp_isc, na.rm = T))/(max(tot_copp_isc, na.rm = T) - min(tot_copp_isc, na.rm = T)))
View(test)
4-0
test <- access_15_dep |>
mutate(new =  min(tot_copp_isc, na.rm = T))
View(test)
test <- access_15_dep |>
mutate(copp_isc_norm = ifelse(tot_copp_isc != 0,
(copp_isc - min(tot_copp_isc))/(max(tot_copp_isc) - min(tot_copp_isc)),
0))
View(test)
test <- access_15_dep |>
mutate(copp_isc_norm = ifelse(tot_copp_isc != 0,
(copp_isc - min(copp_isc))/(max(copp_isc) - min(copp_isc)),
0))
View(test)
test <- access_15_dep |>
mutate(copp_isc_norm =  min(tot_copp_isc))
View(test)
test <- access_15_dep |>
mutate(copp_isc_norm =  max(tot_copp_isc))
View(test)
(1-1)/(1-1)
max_tot <- max(access_15_dep$tot_copp_isc)
min_tot <- min(access_15_dep$tot_copp_isc)
max_tot
min_tot
access_15_dep <- access_15_dep |>
mutate(copp_isc_norm = ifelse(tot_copp_isc != 0,
(copp_isc - min_tot)/(max_tot - min_tot),
0))
View(access_15_dep_total)
View(access_15_dep)
max_tot <- max(access_15_dep$copp_isc)
min_tot <- min(access_15_dep$copp_isc)
access_15_dep <- access_15_dep |>
mutate(copp_isc_norm = ifelse(tot_copp_isc != 0,
(copp_isc - min_tot)/(max_tot - min_tot),
0))
View(access_15_dep)
access_15_dep_div <- access_15_dep |>
group_by(from_id) |>
summarize(div = -sum(prop_copp_isc * log(prop_copp_isc), na.rm = TRUE)/log(4))
View(access_15_dep_div)
access_15_dep$Care_Category_Specific |> unique()
access_15_dep$Care_Category_Specific |> unique() |> length()
no_specific_care_categories <- access_15_dep$Care_Category_Specific |> unique() |> length()
access_15_dep_div <- access_15_dep |>
group_by(from_id) |>
summarize(div = -sum(prop_copp_isc * log(prop_copp_isc), na.rm = TRUE)/log(no_specific_care_categories)) #
View(access_15_dep_div)
access_15_dep_prop_wide <- access_15_dep |>
select(from_id, Care_Category_Specific, prop_copp_isc) |>
pivot_wider(names_from = "Care_Category_Specific",
values_from = "prop_copp_isc") |>
rename_with(-from_id,
.fn = ~paste0("prop_",
str_replace(.x, "-","_")))
access_15_dep_norm_wide <- access_15_dep |>
select(from_id, Care_Category_Specific, copp_isc_norm) |>
pivot_wider(names_from = "Care_Category_Specific",
values_from = "copp_isc_norm") |>
rename_with(-from_id,
.fn = ~paste0("norm_", str_replace(.x, "-","_")))
access_15_dep_total_wide <- access_15_dep |>
select(from_id, Care_Category_Specific, copp_isc) |>
pivot_wider(names_from = "Care_Category_Specific",
values_from = "copp_isc") |>
rename_with(-from_id,
.fn = ~paste0("total_", str_replace(.x, "-","_")))
summary(access_15_dep_total_wide)
summary(access_15_dep_norm_wide)
summary(access_15_dep_prop_wide)
summary(access_15_dep_div)
access_15_dep_wide <- access_15_dep_total_wide |>
left_join(access_15_dep_norm_wide,
by = "from_id") |>
left_join(access_15_dep_prop_wide,
by = "from_id") |>
left_join(access_15_dep_div,
by = "from_id")
summary(access_15_dep_wide)
set.seed(5935)
# run the SOM algorithm
nrows <- 5
ncols <- 5
access.som <- trainSOM(x.data = access_15_dep_wide |>
# Remove the non-normalized accessibility scores, as well as the Care Category character names
select(-c(from_id, total_Care_Category, starts_with("total_"),
norm_Care_Category, prop_Care_Category)),
dimension=c(nrows, ncols),
nb.save = 100,
radius.type = "letremy",
verbose = TRUE)
View(access_15_dep_wide)
access_15_dep_wide |>
# Remove the non-normalized accessibility scores, as well as the Care Category character names
select(-c(from_id, starts_with("total_"),
total_Care_Category, norm_Care_Category, prop_Care_Category)) |> summary()
access_15_dep_wide |> select(-c(from_id, starts_with("total_"), total_Care_Category, norm_Care_Category, prop_Care_Category)) |> colnames()
access_15_dep_div <- access_15_dep |>
group_by(from_id) |>
summarize(div = -sum(prop_copp_isc * log(prop_copp_isc), na.rm = TRUE)/log(no_specific_care_categories),
.groups = "drop") #
access_15_dep_wide <- access_15_dep_total_wide |>
left_join(access_15_dep_norm_wide,
by = "from_id") |>
left_join(access_15_dep_prop_wide,
by = "from_id") |>
left_join(access_15_dep_div,
by = "from_id")
summary(access_15_dep_wide)
access_15_dep_wide |> select(-c(from_id, starts_with("total_"), total_Care_Category, norm_Care_Category, prop_Care_Category)) |> colnames()
access_15_dep_wide |> ungroup |> select(-c(from_id, starts_with("total_"), total_Care_Category, norm_Care_Category, prop_Care_Category)) |> colnames()
access_15_dep_wide |> ungroup() |> select(-c(from_id, starts_with("total_"), total_Care_Category, norm_Care_Category, prop_Care_Category)) |> colnames()
access.som <- trainSOM(x.data = access_15_dep_wide |> ungroup() |>
# Remove the non-normalized accessibility scores, as well as the Care Category character names
select(-c(from_id, starts_with("total_"),
total_Care_Category, norm_Care_Category, prop_Care_Category)),
dimension=c(nrows, ncols),
nb.save = 100,
radius.type = "letremy",
verbose = TRUE)
View(access_15_dep_wide)
#these are the input variables, per parcel (143,882 parcels = nrows)
access_15_dep_wide |> ungroup() |> select(-c(from_id, starts_with("total_"), total_Care_Category, norm_Care_Category, prop_Care_Category)) |> colnames()
access.som <- trainSOM(x.data = access_15_dep_wide |> ungroup() |>
# Remove the non-normalized accessibility scores, as well as the Care Category character names
select(-c(from_id, starts_with("total_"),
total_Care_Category, norm_Care_Category, prop_Care_Category)),
dimension=c(nrows, ncols),
nb.save = 100,
radius.type = "letremy",
verbose = TRUE)
class(access.som)
summary(access.som)
plot(access.som,
what = "energy")
access.som <- trainSOM(x.data = access_15_dep_wide |> ungroup() |>
# Remove the non-normalized accessibility scores, as well as the Care Category character names
select(-c(from_id, starts_with("total_"),
total_Care_Category, norm_Care_Category, prop_Care_Category)),
dimension=c(nrows, ncols),
nb.save = 10,
radius.type = "letremy",
verbose = TRUE)
plot(access.som,
what = "energy")
table(access.som$clustering)
table(access.som$clustering)
plot(access.som,
what = "obs",
type = "hitmap")
par(mfrow=c(3,2))
plot(access.som,
what = "obs",
type = "color",
variable = 1,
show.names=TRUE,
main="norm_Dependent_centric")
plot(access.som,
what = "obs",
type = "color",
variable = 2,
show.names = TRUE,
main = "norm_Errand_centric")
plot(access.som,
what = "obs",
type = "color",
variable = 3,
show.names = TRUE,
main="norm_Grocery_centric")
plot(access.som,
what="obs",
type="color",
variable=4,
show.names = TRUE,
main="norm_Health_centric")
plot(access.som,
what="obs",
type="color",
variable = 9,
show.names = TRUE,
main="Diversity")
par(mfrow=c(3,2))
plot(access.som,
what = "obs",
type = "color",
variable = 1,
show.names=TRUE)
plot(access.som,
what = "obs",
type = "color",
variable = 2,
show.names = TRUE)
plot(access.som,
what = "obs",
type = "color",
variable = 3,
show.names = TRUE)
plot(access.som,
what="obs",
type="color",
variable=4,
show.names = TRUE)
plot(access.som,
what="obs",
type="color",
variable=5,
show.names = TRUE)
plot(access.som,
what="obs",
type="color",
variable=6,
show.names = TRUE)
plot(access.som,
what="obs",
type="color",
variable = 13,
show.names = TRUE,
main="Diversity")
plot(access.som,
what = "obs",
type="barplot",
show.names=TRUE)
plot(access.som,
what="obs",
type="meanline",
key.loc=c(-2,8),
mar=c(0,2,2,0))
plot(access.som,
what="obs",
type="boxplot")
plot(access.sc,
type= c("dendrogram"),
plot.var = FALSE,
show.names = TRUE,
main = " ",
ylab="Dissimilarity Index",
xlab= " ")
plot(access.som,
what="obs",
type="boxplot")
access.sc <- superClass(access.som,
k = 5)
summary(access.sc)
plot(access.sc,
type= c("dendrogram"),
plot.var = FALSE,
show.names = TRUE,
main = " ",
ylab="Dissimilarity Index",
xlab= " ")
plot(access.sc,
type = "grid",
plot.var = FALSE,
main = " ",
plot.legend = TRUE)
access_15_wide$cluster <- access.som$clustering
access_15_dep_wide$cluster <- access.som$clustering
access_15_dep_wide$scluster <- access.sc$cluster[access.som$clustering]
access_15_dep_wide |>
select(scluster, starts_with("total_"), div) |>
group_by(scluster) |>
skim()
|> ungroup() |> select(-c(from_id, starts_with("total_"), total_Care_Category, norm_Care_Category, prop_Care_Category)) |>
access_15_dep_wide |>
select(scluster, starts_with("total_"), div) |> colnames()
access_15_dep_wide |> |> ungroup() |>
access_15_dep_wide |> ungroup() |>
select(scluster, starts_with("total_"), div) |>
group_by(scluster) |>
skim()
access_15_dep_wide |> ungroup() |>
select(scluster, starts_with("total_"), div) |>
group_by(scluster) |>
skim()
access_15_dep_wide |> ungroup() |>
select(-c(cluster,
starts_with("prop"),
starts_with("norm"))) |> colnames()
df <- access_15_dep_wide |> ungroup() |>
select(-c(cluster,
starts_with("prop"),
starts_with("norm"))) |>
mutate(scluster = factor(scluster),
div = round(div, digits = 3))
df <- access_15_dep_wide |> ungroup() |>
select(-c(cluster,
starts_with("prop"),
starts_with("norm"))) |>
rename(Rec = "total_Community or Recreation Centre",
Daycare = "total_Daycare or EarlyON",
LTC = "total_Long_Term Care or Retirement Home",
Park = "total_Park",
School = "total_School",
Senior = "total_Senior Centre") |>
mutate(scluster = factor(scluster),
div = round(div, digits = 3))
df <- df |>
mutate(Total_copp = Rec + Daycare + LTC + Park + School + Senior)
classmod.som <- rpart(data = df,
formula = scluster ~ (Rec + Daycare + LTC + Park + School + Senior + div))
# Predict the labels and add them to the dataset
predicted_labels <- predict(classmod.som, df) |> as.data.frame()
df$SC1 <- predicted_labels$`1`
df$SC2 <- predicted_labels$`2`
df$SC3 <- predicted_labels$`3`
df$SC4 <- predicted_labels$`4`
df$SC5 <- predicted_labels$`5`
df_DA <- df |> left_join(access_15 |> dplyr::select(c("from_id","GeoUID")), by = "from_id") |>
group_by(GeoUID) |>
summarise(
SC1 = median(SC1),
SC2 = median(SC2),
SC3 = median(SC3),
SC4 = median(SC4),
SC5 = median(SC5),
max_label_val = pmax(SC1, SC2, SC3, SC4, SC5),
med_tot_copp_isc = median(Total_copp),
med_div = median(div),
med_dep_copp = median(Dependent),
med_err_copp = median(Errand),
med_groc_copp = median(Grocery),
med_health_copp = median(Health)) |>
mutate(max_label = case_when(max_label_val == SC1 ~ "b. Caring - complete (SC1)",
max_label_val == SC2 ~ "a. Very caring - very complete (SC2)",
max_label_val == SC3 ~ "d. Somewhat caring - not complete (SC3)",
max_label_val == SC4 ~ "c. Somewhat caring - complete (SC4)",
max_label_val == SC5 ~ "d. not caring - not complete (SC5)")) |>
left_join(HAM_census_21 |> select(c(GeoUID)), by=c("GeoUID")) |> st_as_sf() |> st_make_valid()
df_DA <- df |> left_join(access_15 |> dplyr::select(c("from_id","GeoUID")), by = "from_id") |>
group_by(GeoUID) |>
summarise(
SC1 = median(SC1),
SC2 = median(SC2),
SC3 = median(SC3),
SC4 = median(SC4),
SC5 = median(SC5),
max_label_val = pmax(SC1, SC2, SC3, SC4, SC5),
med_tot_copp_isc = median(Total_copp),
med_div = median(div),
med_rec_copp = median(Rec),
med_daycare_copp = median(Daycare),
med_LTC_copp = median(LTC),
med_park_copp = median(Park),
med_school_copp = median(School),
med_sen_copp = median(Senior)) |>
mutate(max_label = case_when(max_label_val == SC1 ~ "b. Caring - complete (SC1)",
max_label_val == SC2 ~ "a. Very caring - very complete (SC2)",
max_label_val == SC3 ~ "d. Somewhat caring - not complete (SC3)",
max_label_val == SC4 ~ "c. Somewhat caring - complete (SC4)",
max_label_val == SC5 ~ "d. not caring - not complete (SC5)")) |>
left_join(HAM_census_21 |> select(c(GeoUID)), by=c("GeoUID")) |> st_as_sf() |> st_make_valid()
df_DA <- df |> left_join(access_15_dep |> dplyr::select(c("from_id","GeoUID")), by = "from_id") |>
group_by(GeoUID) |>
summarise(
SC1 = median(SC1),
SC2 = median(SC2),
SC3 = median(SC3),
SC4 = median(SC4),
SC5 = median(SC5),
max_label_val = pmax(SC1, SC2, SC3, SC4, SC5),
med_tot_copp_isc = median(Total_copp),
med_div = median(div),
med_rec_copp = median(Rec),
med_daycare_copp = median(Daycare),
med_LTC_copp = median(LTC),
med_park_copp = median(Park),
med_school_copp = median(School),
med_sen_copp = median(Senior)) |>
mutate(max_label = case_when(max_label_val == SC1 ~ "b. Caring - complete (SC1)",
max_label_val == SC2 ~ "a. Very caring - very complete (SC2)",
max_label_val == SC3 ~ "d. Somewhat caring - not complete (SC3)",
max_label_val == SC4 ~ "c. Somewhat caring - complete (SC4)",
max_label_val == SC5 ~ "d. not caring - not complete (SC5)")) |>
left_join(HAM_census_21 |> select(c(GeoUID)), by=c("GeoUID")) |> st_as_sf() |> st_make_valid()
total_copp_plot <- tm_shape(ham_bay, bbox=Community_Boundaries) + tm_polygons(col="skyblue", border.alpha = 0) +
tm_shape(hydro_p_LakeOntario, bbox=Community_Boundaries) + tm_polygons(col="skyblue", border.alpha = 0)+
tm_shape(df_DA) +
tm_polygons("med_tot_copp_isc",
border.alpha = 0.2,
style = "quantile", n=4,
palette = "Purples",
title = "Total access to care destinations",) +
tm_shape(Community_Boundaries) + tm_polygons(alpha=0)+
tm_scale_bar(position = c("left", "bottom"), breaks = c(0, 1, 5, 10, 15)) +
tm_compass(position = c("left", "top"), size=1.0)+
tm_layout(legend.bg.color = "white", legend.bg.alpha = 0.4,
bg.color = "grey",
legend.position = c("right","top"))
total_copp_plot
SClabel_copp_plot <- tm_shape(ham_bay, bbox=Community_Boundaries) + tm_polygons(col="skyblue", border.alpha = 0) +
tm_shape(hydro_p_LakeOntario, bbox=Community_Boundaries) + tm_polygons(col="skyblue", border.alpha = 0)+
tm_shape(df_DA) +
tm_polygons("max_label",
border.alpha = 0.2,
palette = c("#44ce1b","#bbdb44", "#f7e379", "#f2a134","#e51f1f"),
labels = (c("Very caring - very complete",
"Caring - Complete",
"Somewhat caring - complete",
"Somewhat caring - somewhat complete",
"Somewhat caring - somewhat complete")),
title = "Neighbourhood typology") +
tm_shape(Community_Boundaries) + tm_polygons(alpha=0)+
tm_scale_bar(position = c("left", "bottom"), breaks = c(0, 1, 5, 10, 15)) +
tm_compass(position = c("left", "top"), size=1.0)+
tm_layout(legend.bg.color = "white", legend.bg.alpha = 0.4,
bg.color = "grey",
legend.position = c("right","top"))
SCLab_and_total_copp_plot <- tmap_arrange(SClabel_copp_plot, total_copp_plot, nrow=2)
SCLab_and_total_copp_plot
