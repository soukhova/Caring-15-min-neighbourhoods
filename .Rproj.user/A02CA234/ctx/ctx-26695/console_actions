{
    "type": [
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2
    ],
    "data": [
        "\nR version 4.3.2 (2023-10-31 ucrt) -- \"Eye Holes\"\nCopyright (C) 2023 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "library(cancensus)",
        "> ",
        "library(sf)",
        "> ",
        "library(leaflet)",
        "> ",
        "library(r5r)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(purrr)",
        "> ",
        "# increase Java memory",
        "> ",
        "options(java.parameters = \"-Xmx6G\")",
        "> ",
        "#changing my time zone to Toronto's time zone",
        "> ",
        "Sys.setenv(TZ='EDT')",
        "> ",
        "#load(\"HAM_census_21.rda\")",
        "> ",
        "Community_Boundaries <- read_sf(\"data-raw/Community_Boundaries.shp\") |> st_transform(st_crs(HAM_census_21))",
        "Error: object 'HAM_census_21' not found\n",
        "> ",
        "load(\"HAM_census_21.rda\")",
        "> ",
        "Community_Boundaries <- read_sf(\"data-raw/Community_Boundaries.shp\") |> st_transform(st_crs(HAM_census_21))",
        "> ",
        "#some DAs are oddly shaped, such that their centroids are outside of their surface. here we create a function if the polygon has a centroid that is inside the polygon, use that, otherwise, find a point within the polygon. (From: https://stackoverflow.com/questions/52522872/r-sf-package-centroid-within-polygon)",
        "> ",
        "",
        "> ",
        "st_centroid_within_poly <- function (poly) {",
        "+ ",
        "",
        "+ ",
        "  # check if centroid is in polygon",
        "+ ",
        "  centroid <- poly %>% st_centroid() ",
        "+ ",
        "  in_poly <- st_within(centroid, poly, sparse = F)[[1]] ",
        "+ ",
        "",
        "+ ",
        "  # if it is, return that centroid",
        "+ ",
        "  if (in_poly) return(centroid) ",
        "+ ",
        "",
        "+ ",
        "  # if not, calculate a point on the surface and return that",
        "+ ",
        "  centroid_in_poly <- st_point_on_surface(poly) ",
        "+ ",
        "  return(centroid_in_poly)",
        "+ ",
        "}",
        "> ",
        "orig_sf <- HAM_census_21 |> st_intersection(City_Boundary |> filter(COMMUNITY_ == \"Dundas\" | COMMUNITY_ == \"Flamborough\")) |>",
        "+ ",
        "  mutate(lon = map_dbl(geometry, ~st_centroid_within_poly(.x)[[1]]),",
        "+ ",
        "         lat = map_dbl(geometry, ~st_centroid_within_poly(.x)[[2]]))",
        "Error: object 'City_Boundary' not found\n",
        "> ",
        "orig_sf <- HAM_census_21 |> st_intersection(Community_Boundaries |> filter(COMMUNITY_ == \"Dundas\" | COMMUNITY_ == \"Flamborough\")) |>",
        "+ ",
        "  mutate(lon = map_dbl(geometry, ~st_centroid_within_poly(.x)[[1]]),",
        "+ ",
        "         lat = map_dbl(geometry, ~st_centroid_within_poly(.x)[[2]]))",
        "> ",
        "orig <- orig_sf %>% ",
        "+ ",
        "  st_drop_geometry() %>%",
        "+ ",
        "  transmute(id = GeoUID,",
        "+ ",
        "            lon,",
        "+ ",
        "            lat)",
        "> ",
        "#takesa few minutes",
        "> ",
        "r5_HAM <- setup_r5(data_path = r5_path, verbose = TRUE)",
        "Error: object 'r5_path' not found\n",
        "> ",
        "# the r5r package requires Java Development Kit version 11, which can be downloaded from https://www.oracle.com/java/technologies/javase-jdk11-downloads.html . See the direction given in the r5r installation here (https://ipeagit.github.io/r5r/articles/r5r.html)",
        "> ",
        "dir.create(\"./data-raw/tt\") #create a folder, if it already exists - this function does nothing",
        "> ",
        "",
        "> ",
        "r5_path <- file.path(\"./data-raw/tt\")",
        "> ",
        "list.files(r5_path)",
        "[1] \"Hamilton_extended.osm.pbf\"         \"HSR_transit.zip\"                   \"network.dat\"                      \n[4] \"network_settings.json\"             \"ontario-latest.osm_01.pbf\"         \"ontario-latest.osm_01.pbf.mapdb\"  \n[7] \"ontario-latest.osm_01.pbf.mapdb.p\"\n",
        "> ",
        "# the r5r package requires Java Development Kit version 11, which can be downloaded from https://www.oracle.com/java/technologies/javase-jdk11-downloads.html . See the direction given in the r5r installation here (https://ipeagit.github.io/r5r/articles/r5r.html)",
        "> ",
        "dir.create(\"./data-raw/tt\") #create a folder, if it already exists - this function does nothing",
        "> ",
        "",
        "> ",
        "r5_path <- file.path(\"./data-raw/tt\")",
        "> ",
        "list.files(r5_path)",
        "[1] \"Hamilton_extended.osm.pbf\"         \"HSR_transit.zip\"                   \"network.dat\"                      \n[4] \"network_settings.json\"             \"ontario-latest.osm_01.pbf\"         \"ontario-latest.osm_01.pbf.mapdb\"  \n[7] \"ontario-latest.osm_01.pbf.mapdb.p\"\n",
        "> ",
        "#takesa few minutes",
        "> ",
        "r5_HAM <- setup_r5(data_path = r5_path, verbose = TRUE)",
        "2024-02-20 15:23:41,599 [main] INFO  o.i.r.N.NetworkChecker - Reading transport network...\r\n",
        "2024-02-20 15:23:41,639 [main] INFO  o.i.r.N.NetworkChecker - Loading network from file format version nv2, written by R5 commit 995635a1750696d1666a6ac06fde827cf1944fd0\r\n",
        "2024-02-20 15:23:41,645 [main] INFO  c.c.r.k.KryoNetworkSerializer - Reading transport network...\r\n",
        "2024-02-20 15:23:41,647 [main] INFO  c.c.r.k.KryoNetworkSerializer - Loading network from file format version nv2, written by R5 commit 995635a1750696d1666a6ac06fde827cf1944fd0\r\n",
        "2024-02-20 15:23:42,056 [main] INFO  c.c.r.k.KryoNetworkSerializer - Done reading.\r\n",
        "2024-02-20 15:23:42,058 [main] INFO  c.c.r.s.StreetLayer - Building edge lists from edges...\r\n",
        "2024-02-20 15:23:42,081 [main] INFO  c.c.r.s.StreetLayer - Done building edge lists.\r\n",
        "2024-02-20 15:23:42,083 [main] INFO  c.c.r.s.StreetLayer - Indexing streets...\r\n",
        "2024-02-20 15:23:42,238 [main] INFO  c.c.r.s.StreetLayer - Done indexing streets.\r\n",
        "2024-02-20 15:23:42,240 [main] INFO  c.c.r.t.TransitLayer - Rebuilding transient indices.\r\n",
        "2024-02-20 15:23:42,250 [main] INFO  c.c.r.t.TransitLayer - Done rebuilding transient indices.\r\n",
        "> ",
        "library(concaveman) #dundas works. Flamborough, hamilton, ancaster, stoney creek and Glanbrook DO NOT.",
        "> ",
        "iso15_walk <- r5r::isochrone(r5r_core = r5_HAM,",
        "+ ",
        "                          origins = orig,",
        "+ ",
        "                          mode = \"WALK\",",
        "+ ",
        "                          sample_size = 0.2,",
        "+ ",
        "                          max_trip_duration = 15,",
        "+ ",
        "                          cutoffs = 15)",
        "\r3 out of 131 origins processed.",
        "\r16 out of 131 origins processed.",
        "\r15 out of 131 origins processed.",
        "\r14 out of 131 origins processed.",
        "\r13 out of 131 origins processed.",
        "\r12 out of 131 origins processed.",
        "\r11 out of 131 origins processed.",
        "\r10 out of 131 origins processed.",
        "\r9 out of 131 origins processed.",
        "\r8 out of 131 origins processed.",
        "\r7 out of 131 origins processed.",
        "\r6 out of 131 origins processed.",
        "\r5 out of 131 origins processed.",
        "\r2 out of 131 origins processed.",
        "\r1 out of 131 origins processed.",
        "\r4 out of 131 origins processed.",
        "\r30 out of 131 origins processed.",
        "\r29 out of 131 origins processed.",
        "\r28 out of 131 origins processed.",
        "\r27 out of 131 origins processed.",
        "\r26 out of 131 origins processed.",
        "\r25 out of 131 origins processed.",
        "\r24 out of 131 origins processed.",
        "\r23 out of 131 origins processed.",
        "\r22 out of 131 origins processed.",
        "\r21 out of 131 origins processed.",
        "\r20 out of 131 origins processed.",
        "\r19 out of 131 origins processed.",
        "\r18 out of 131 origins processed.",
        "\r17 out of 131 origins processed.",
        "\r44 out of 131 origins processed.",
        "\r43 out of 131 origins processed.",
        "\r42 out of 131 origins processed.",
        "\r41 out of 131 origins processed.",
        "\r40 out of 131 origins processed.",
        "\r39 out of 131 origins processed.",
        "\r38 out of 131 origins processed.",
        "\r37 out of 131 origins processed.",
        "\r36 out of 131 origins processed.",
        "\r35 out of 131 origins processed.",
        "\r34 out of 131 origins processed.",
        "\r33 out of 131 origins processed.",
        "\r32 out of 131 origins processed.",
        "\r31 out of 131 origins processed.",
        "\r58 out of 131 origins processed.",
        "\r57 out of 131 origins processed.",
        "\r56 out of 131 origins processed.",
        "\r55 out of 131 origins processed.",
        "\r54 out of 131 origins processed.",
        "\r53 out of 131 origins processed.",
        "\r52 out of 131 origins processed.",
        "\r51 out of 131 origins processed.",
        "\r50 out of 131 origins processed.",
        "\r49 out of 131 origins processed.",
        "\r48 out of 131 origins processed.",
        "\r47 out of 131 origins processed.",
        "\r46 out of 131 origins processed.",
        "\r45 out of 131 origins processed.",
        "\r71 out of 131 origins processed.",
        "\r70 out of 131 origins processed.",
        "\r69 out of 131 origins processed.",
        "\r68 out of 131 origins processed.",
        "\r67 out of 131 origins processed.",
        "\r66 out of 131 origins processed.",
        "\r65 out of 131 origins processed.",
        "\r64 out of 131 origins processed.",
        "\r63 out of 131 origins processed.",
        "\r62 out of 131 origins processed.",
        "\r61 out of 131 origins processed.",
        "\r60 out of 131 origins processed.",
        "\r59 out of 131 origins processed.",
        "\r83 out of 131 origins processed.",
        "\r82 out of 131 origins processed.",
        "\r81 out of 131 origins processed.",
        "\r80 out of 131 origins processed.",
        "\r79 out of 131 origins processed.",
        "\r78 out of 131 origins processed.",
        "\r77 out of 131 origins processed.",
        "\r76 out of 131 origins processed.",
        "\r75 out of 131 origins processed.",
        "\r74 out of 131 origins processed.",
        "\r73 out of 131 origins processed.",
        "\r72 out of 131 origins processed.",
        "\r96 out of 131 origins processed.",
        "\r95 out of 131 origins processed.",
        "\r94 out of 131 origins processed.",
        "\r93 out of 131 origins processed.",
        "\r92 out of 131 origins processed.",
        "\r91 out of 131 origins processed.",
        "\r90 out of 131 origins processed.",
        "\r89 out of 131 origins processed.",
        "\r88 out of 131 origins processed.",
        "\r87 out of 131 origins processed.",
        "\r86 out of 131 origins processed.",
        "\r85 out of 131 origins processed.",
        "\r84 out of 131 origins processed.",
        "\r109 out of 131 origins processed.",
        "\r108 out of 131 origins processed.",
        "\r107 out of 131 origins processed.",
        "\r106 out of 131 origins processed.",
        "\r105 out of 131 origins processed.",
        "\r104 out of 131 origins processed.",
        "\r103 out of 131 origins processed.",
        "\r102 out of 131 origins processed.",
        "\r101 out of 131 origins processed.",
        "\r100 out of 131 origins processed.",
        "\r99 out of 131 origins processed.",
        "\r98 out of 131 origins processed.",
        "\r97 out of 131 origins processed.",
        "\r120 out of 131 origins processed.",
        "\r119 out of 131 origins processed.",
        "\r118 out of 131 origins processed.",
        "\r117 out of 131 origins processed.",
        "\r116 out of 131 origins processed.",
        "\r115 out of 131 origins processed.",
        "\r114 out of 131 origins processed.",
        "\r113 out of 131 origins processed.",
        "\r112 out of 131 origins processed.",
        "\r111 out of 131 origins processed.",
        "\r110 out of 131 origins processed.",
        "\r130 out of 131 origins processed.",
        "\r128 out of 131 origins processed.",
        "\r129 out of 131 origins processed.",
        "\r127 out of 131 origins processed.",
        "\r126 out of 131 origins processed.",
        "\r125 out of 131 origins processed.",
        "\r124 out of 131 origins processed.",
        "\r123 out of 131 origins processed.",
        "\r122 out of 131 origins processed.",
        "\r121 out of 131 origins processed.",
        "\r131 out of 131 origins processed.",
        ".. DONE!\n",
        "Consolidating results...",
        " DONE!\n",
        "Preparing final output...",
        " DONE!\n",
        "\u001B[1m\u001B[33mError\u001B[39m in `dplyr::summarise()`:\u001B[22m\n\u001B[38;5;255m\u001B[36mℹ\u001B[38;5;255m In argument: `polygons = `%>%`(...)`.\u001B[39m\n\u001B[1mCaused by error:\u001B[22m\n\u001B[33m!\u001B[39m TypeError: Cannot read properties of undefined (reading '0')\nBacktrace:\n\u001B[90m  1. \u001B[39mr5r::isochrone(...)\n\u001B[90m 33. \u001B[39m\u001B[1mbase\u001B[22m::stop(`<std::rn_>`)\n",
        "> ",
        "orig_sf <- HAM_census_21 |> st_intersection(Community_Boundaries |> filter(COMMUNITY_ == \"Dundas\")) |>",
        "+ ",
        "  mutate(lon = map_dbl(geometry, ~st_centroid_within_poly(.x)[[1]]),",
        "+ ",
        "         lat = map_dbl(geometry, ~st_centroid_within_poly(.x)[[2]]))",
        "> ",
        "orig <- orig_sf %>% ",
        "+ ",
        "  st_drop_geometry() %>%",
        "+ ",
        "  transmute(id = GeoUID,",
        "+ ",
        "            lon,",
        "+ ",
        "            lat)",
        "> ",
        "iso15_walk <- r5r::isochrone(r5r_core = r5_HAM,",
        "+ ",
        "                          origins = orig,",
        "+ ",
        "                          mode = \"WALK\",",
        "+ ",
        "                          sample_size = 0.2,",
        "+ ",
        "                          max_trip_duration = 15,",
        "+ ",
        "                          cutoffs = 15)",
        "\r1 out of 54 origins processed.",
        "\r16 out of 54 origins processed.",
        "\r15 out of 54 origins processed.",
        "\r14 out of 54 origins processed.",
        "\r13 out of 54 origins processed.",
        "\r12 out of 54 origins processed.",
        "\r10 out of 54 origins processed.",
        "\r11 out of 54 origins processed.",
        "\r9 out of 54 origins processed.",
        "\r8 out of 54 origins processed.",
        "\r7 out of 54 origins processed.",
        "\r6 out of 54 origins processed.",
        "\r5 out of 54 origins processed.",
        "\r4 out of 54 origins processed.",
        "\r3 out of 54 origins processed.",
        "\r2 out of 54 origins processed.",
        "\r29 out of 54 origins processed.",
        "\r28 out of 54 origins processed.",
        "\r27 out of 54 origins processed.",
        "\r26 out of 54 origins processed.",
        "\r25 out of 54 origins processed.",
        "\r24 out of 54 origins processed.",
        "\r23 out of 54 origins processed.",
        "\r22 out of 54 origins processed.",
        "\r21 out of 54 origins processed.",
        "\r20 out of 54 origins processed.",
        "\r19 out of 54 origins processed.",
        "\r18 out of 54 origins processed.",
        "\r17 out of 54 origins processed.",
        "\r42 out of 54 origins processed.",
        "\r41 out of 54 origins processed.",
        "\r40 out of 54 origins processed.",
        "\r39 out of 54 origins processed.",
        "\r38 out of 54 origins processed.",
        "\r37 out of 54 origins processed.",
        "\r36 out of 54 origins processed.",
        "\r35 out of 54 origins processed.",
        "\r34 out of 54 origins processed.",
        "\r33 out of 54 origins processed.",
        "\r32 out of 54 origins processed.",
        "\r31 out of 54 origins processed.",
        "\r30 out of 54 origins processed.",
        "\r54 out of 54 origins processed.",
        "\r53 out of 54 origins processed.",
        "\r52 out of 54 origins processed.",
        "\r51 out of 54 origins processed.",
        "\r50 out of 54 origins processed.",
        "\r49 out of 54 origins processed.",
        "\r48 out of 54 origins processed.",
        "\r47 out of 54 origins processed.",
        "\r46 out of 54 origins processed.",
        "\r45 out of 54 origins processed.",
        "\r44 out of 54 origins processed.",
        "\r43 out of 54 origins processed.",
        ".. DONE!\n",
        "Consolidating results...",
        " DONE!\n",
        "Preparing final output...",
        " DONE!\n",
        "> ",
        "# Mapping DAs",
        "> ",
        "leaflet() |>",
        "+ ",
        "  addTiles() |>",
        "+ ",
        "  addPolygons(data = iso15_walk) ",
        "> ",
        "iso15_walk <- r5r::isochrone(r5r_core = r5_HAM,",
        "+ ",
        "                          origins = orig,",
        "+ ",
        "                          mode = \"WALK\",",
        "+ ",
        "                          sample_size = 1,",
        "+ ",
        "                          max_trip_duration = 15,",
        "+ ",
        "                          cutoffs = c(0,15))",
        "\r1 out of 54 origins processed.",
        "\r15 out of 54 origins processed.",
        "\r14 out of 54 origins processed.",
        "\r13 out of 54 origins processed.",
        "\r12 out of 54 origins processed.",
        "\r11 out of 54 origins processed.",
        "\r10 out of 54 origins processed.",
        "\r9 out of 54 origins processed.",
        "\r8 out of 54 origins processed.",
        "\r7 out of 54 origins processed.",
        "\r6 out of 54 origins processed.",
        "\r5 out of 54 origins processed.",
        "\r4 out of 54 origins processed.",
        "\r3 out of 54 origins processed.",
        "\r2 out of 54 origins processed.",
        "\r26 out of 54 origins processed.",
        "\r25 out of 54 origins processed.",
        "\r24 out of 54 origins processed.",
        "\r23 out of 54 origins processed.",
        "\r22 out of 54 origins processed.",
        "\r21 out of 54 origins processed.",
        "\r20 out of 54 origins processed.",
        "\r19 out of 54 origins processed.",
        "\r18 out of 54 origins processed.",
        "\r17 out of 54 origins processed.",
        "\r16 out of 54 origins processed.",
        "\r34 out of 54 origins processed.",
        "\r33 out of 54 origins processed.",
        "\r32 out of 54 origins processed.",
        "\r31 out of 54 origins processed.",
        "\r30 out of 54 origins processed.",
        "\r29 out of 54 origins processed.",
        "\r40 out of 54 origins processed.",
        "\r28 out of 54 origins processed.",
        "\r27 out of 54 origins processed.",
        "\r42 out of 54 origins processed.",
        "\r41 out of 54 origins processed.",
        "\r39 out of 54 origins processed.",
        "\r38 out of 54 origins processed.",
        "\r37 out of 54 origins processed.",
        "\r36 out of 54 origins processed.",
        "\r35 out of 54 origins processed.",
        "\r49 out of 54 origins processed.",
        "\r48 out of 54 origins processed.",
        "\r47 out of 54 origins processed.",
        "\r46 out of 54 origins processed.",
        "\r45 out of 54 origins processed.",
        "\r44 out of 54 origins processed.",
        "\r43 out of 54 origins processed.",
        "\r54 out of 54 origins processed.",
        "\r53 out of 54 origins processed.",
        "\r52 out of 54 origins processed.",
        "\r51 out of 54 origins processed.",
        "\r50 out of 54 origins processed.",
        ".. DONE!\n",
        "Consolidating results...",
        " DONE!\n",
        "Preparing final output...",
        " DONE!\n",
        "> ",
        "# Mapping DAs",
        "> ",
        "leaflet() |>",
        "+ ",
        "  addTiles() |>",
        "+ ",
        "  addPolygons(data = iso15_walk) ",
        "> ",
        "    # addPolygons(data= HAM_census_21 |> filter(Households != 0)) |>",
        "> ",
        "  # addMarkers(data = st_as_sf(orig_sf |> st_drop_geometry(), coords = c(\"lon\", \"lat\"), ",
        "> ",
        "  #                crs = 4326, agr = \"constant\"))",
        "> ",
        "# Mapping DAs",
        "> ",
        "leaflet() |>",
        "+ ",
        "  addTiles() |>",
        "+ ",
        "  addPolygons(data = orig_sf) ",
        "> ",
        "# Mapping DAs",
        "> ",
        "leaflet() |>",
        "+ ",
        "  addTiles() |>",
        "+ ",
        "  addPolygons(data = HAM_census_21) ",
        "> ",
        "iso15_walk <- r5r::isochrone(r5r_core = r5_HAM,",
        "+ ",
        "                          origins = orig,",
        "+ ",
        "                          mode = \"WALK\",",
        "+ ",
        "                          sample_size = 1,",
        "+ ",
        "                          max_trip_duration = 30,",
        "+ ",
        "                          cutoffs = c(0,30))",
        "\r1 out of 54 origins processed.",
        "\r16 out of 54 origins processed.",
        "\r15 out of 54 origins processed.",
        "\r14 out of 54 origins processed.",
        "\r13 out of 54 origins processed.",
        "\r12 out of 54 origins processed.",
        "\r11 out of 54 origins processed.",
        "\r10 out of 54 origins processed.",
        "\r9 out of 54 origins processed.",
        "\r8 out of 54 origins processed.",
        "\r7 out of 54 origins processed.",
        "\r6 out of 54 origins processed.",
        "\r5 out of 54 origins processed.",
        "\r4 out of 54 origins processed.",
        "\r3 out of 54 origins processed.",
        "\r2 out of 54 origins processed.",
        "\r26 out of 54 origins processed.",
        "\r25 out of 54 origins processed.",
        "\r24 out of 54 origins processed.",
        "\r23 out of 54 origins processed.",
        "\r22 out of 54 origins processed.",
        "\r21 out of 54 origins processed.",
        "\r20 out of 54 origins processed.",
        "\r29 out of 54 origins processed.",
        "\r19 out of 54 origins processed.",
        "\r18 out of 54 origins processed.",
        "\r17 out of 54 origins processed.",
        "\r32 out of 54 origins processed.",
        "\r31 out of 54 origins processed.",
        "\r30 out of 54 origins processed.",
        "\r28 out of 54 origins processed.",
        "\r27 out of 54 origins processed.",
        "\r36 out of 54 origins processed.",
        "\r35 out of 54 origins processed.",
        "\r34 out of 54 origins processed.",
        "\r33 out of 54 origins processed.",
        "\r40 out of 54 origins processed.",
        "\r39 out of 54 origins processed.",
        "\r38 out of 54 origins processed.",
        "\r37 out of 54 origins processed.",
        "\r44 out of 54 origins processed.",
        "\r43 out of 54 origins processed.",
        "\r42 out of 54 origins processed.",
        "\r41 out of 54 origins processed.",
        "\r48 out of 54 origins processed.",
        "\r47 out of 54 origins processed.",
        "\r46 out of 54 origins processed.",
        "\r45 out of 54 origins processed.",
        "\r51 out of 54 origins processed.",
        "\r50 out of 54 origins processed.",
        "\r49 out of 54 origins processed.",
        "\r54 out of 54 origins processed.",
        "\r53 out of 54 origins processed.",
        "\r52 out of 54 origins processed.",
        ".. DONE!\n",
        "Consolidating results...",
        " DONE!\n",
        "Preparing final output...",
        " DONE!\n",
        "> ",
        "# Mapping DAs",
        "> ",
        "leaflet() |>",
        "+ ",
        "  addTiles() |>",
        "+ ",
        "  addPolygons(data = iso15_walk) ",
        "> ",
        "# Mapping DAs",
        "> ",
        "leaflet() |>",
        "+ ",
        "  addTiles() |>",
        "+ ",
        "  addPolygons(data = orig_sf) ",
        "> ",
        "# Mapping DAs",
        "> ",
        "leaflet() |>",
        "+ ",
        "  addTiles() |>",
        "+ ",
        "  addPolygons(data = Community_Boundaries) ",
        "> ",
        "# Mapping DAs",
        "> ",
        "leaflet() |>",
        "+ ",
        "  addTiles() |>",
        "+ ",
        "  addPolygons(data = orig_sf) ",
        "> ",
        "# Mapping DAs",
        "> ",
        "leaflet() |>",
        "+ ",
        "  addTiles() |>",
        "+ ",
        "  addPolygons(data = Community_Boundaries) ",
        "> ",
        "# Mapping DAs",
        "> ",
        "leaflet() |>",
        "+ ",
        "  addTiles() |>",
        "+ ",
        "  addPolygons(data = orig_sf) ",
        "> ",
        "iso15_walk <- r5r::isochrone(r5r_core = r5_HAM,",
        "+ ",
        "                          origins = orig,",
        "+ ",
        "                          mode = \"WALK\",",
        "+ ",
        "                          sample_size = 1,",
        "+ ",
        "                          max_trip_duration = 15,",
        "+ ",
        "                          cutoffs = c(0,15))",
        "\r1 out of 54 origins processed.",
        "\r15 out of 54 origins processed.",
        "\r14 out of 54 origins processed.",
        "\r13 out of 54 origins processed.",
        "\r12 out of 54 origins processed.",
        "\r11 out of 54 origins processed.",
        "\r10 out of 54 origins processed.",
        "\r9 out of 54 origins processed.",
        "\r8 out of 54 origins processed.",
        "\r7 out of 54 origins processed.",
        "\r6 out of 54 origins processed.",
        "\r5 out of 54 origins processed.",
        "\r4 out of 54 origins processed.",
        "\r3 out of 54 origins processed.",
        "\r2 out of 54 origins processed.",
        "\r25 out of 54 origins processed.",
        "\r24 out of 54 origins processed.",
        "\r23 out of 54 origins processed.",
        "\r22 out of 54 origins processed.",
        "\r21 out of 54 origins processed.",
        "\r20 out of 54 origins processed.",
        "\r19 out of 54 origins processed.",
        "\r18 out of 54 origins processed.",
        "\r17 out of 54 origins processed.",
        "\r16 out of 54 origins processed.",
        "\r32 out of 54 origins processed.",
        "\r31 out of 54 origins processed.",
        "\r30 out of 54 origins processed.",
        "\r29 out of 54 origins processed.",
        "\r28 out of 54 origins processed.",
        "\r27 out of 54 origins processed.",
        "\r26 out of 54 origins processed.",
        "\r40 out of 54 origins processed.",
        "\r39 out of 54 origins processed.",
        "\r38 out of 54 origins processed.",
        "\r37 out of 54 origins processed.",
        "\r36 out of 54 origins processed.",
        "\r35 out of 54 origins processed.",
        "\r34 out of 54 origins processed.",
        "\r33 out of 54 origins processed.",
        "\r45 out of 54 origins processed.",
        "\r44 out of 54 origins processed.",
        "\r43 out of 54 origins processed.",
        "\r42 out of 54 origins processed.",
        "\r41 out of 54 origins processed.",
        "\r50 out of 54 origins processed.",
        "\r49 out of 54 origins processed.",
        "\r48 out of 54 origins processed.",
        "\r47 out of 54 origins processed.",
        "\r46 out of 54 origins processed.",
        "\r53 out of 54 origins processed.",
        "\r52 out of 54 origins processed.",
        "\r51 out of 54 origins processed.",
        "\r54 out of 54 origins processed.",
        ".. DONE!\n",
        "Consolidating results...",
        " DONE!\n",
        "Preparing final output...",
        " DONE!\n",
        "> ",
        "# Mapping DAs",
        "> ",
        "leaflet() |>",
        "+ ",
        "  addTiles() |>",
        "+ ",
        "  addPolygons(data = iso15_walk) ",
        "> ",
        "# Mapping DAs",
        "> ",
        "leaflet() |>",
        "+ ",
        "  addTiles() |>",
        "+ ",
        "  addPolygons(data = iso15_walk) |>",
        "+ ",
        "    # addPolygons(data= HAM_census_21 |> filter(Households != 0)) |>",
        "+ ",
        "  addMarkers(data = st_as_sf(orig_sf |> st_drop_geometry(), coords = c(\"lon\", \"lat\"), crs = 4326, agr = \"constant\"))",
        "> ",
        "# Mapping DAs",
        "> ",
        "leaflet() |>",
        "+ ",
        "  addTiles() |>",
        "+ ",
        "  addPolygons(data = iso15_walk |> filter(id == 35250030)) |>",
        "+ ",
        "    # addPolygons(data= HAM_census_21 |> filter(Households != 0)) |>",
        "+ ",
        "  addMarkers(data = st_as_sf(orig_sf |> st_drop_geometry() |> filter(GeoUID == 35250030), coords = c(\"lon\", \"lat\"), crs = 4326, agr = \"constant\"))",
        "> ",
        "# Mapping DAs",
        "> ",
        "leaflet() |>",
        "+ ",
        "  addTiles() |>",
        "+ ",
        "  addPolygons(data = iso15_walk |> filter(id == 35250056)) |>",
        "+ ",
        "    # addPolygons(data= HAM_census_21 |> filter(Households != 0)) |>",
        "+ ",
        "  addMarkers(data = st_as_sf(orig_sf |> st_drop_geometry() |> filter(GeoUID == 35250056), coords = c(\"lon\", \"lat\"), crs = 4326, agr = \"constant\"))",
        "> ",
        "orig_sf <- HAM_census_21 |> st_intersection(Community_Boundaries |> filter(COMMUNITY_ == \"Dundas\")) |>",
        "+ ",
        "  mutate(lon = map_dbl(geometry, ~st_centroid_within_poly(.x)[[1]]),",
        "+ ",
        "         lat = map_dbl(geometry, ~st_centroid_within_poly(.x)[[2]]))",
        "> ",
        "View(orig_sf)",
        "Error in Ops.sfc(xi, xj) : operation > not supported\n",
        "Error: VECTOR_ELT() can only be applied to a 'list', not a 'closure'\n",
        "Error in which(search() == \".conflicts\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in xfun::split_lines(x) : \n  R_Reprotect: only 4 protected items, can't reprotect index -1\n",
        "Error in regmatches(line, regexec(.rs.reYamlOptChunkBegin(), line)) : \n  R_Reprotect: only 4 protected items, can't reprotect index -1\n",
        "Error in which(search() == \".conflicts\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in which(search() == \".conflicts\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in which(search() == \".conflicts\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in which(search() == \".conflicts\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in structure(.Call(C_objectSize, x), class = \"object_size\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in structure(.Call(C_objectSize, x), class = \"object_size\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in structure(.Call(C_objectSize, x), class = \"object_size\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in structure(.Call(C_objectSize, x), class = \"object_size\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in structure(.Call(C_objectSize, x), class = \"object_size\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in structure(.Call(C_objectSize, x), class = \"object_size\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in structure(.Call(C_objectSize, x), class = \"object_size\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in structure(.Call(C_objectSize, x), class = \"object_size\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "\nRestarting R session...\n\n"
    ]
}